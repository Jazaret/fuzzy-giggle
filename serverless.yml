# Fuzzy-Giggle - Serverless, aws, nodejs, lambda, gateway-api, dynamodb
# Javier Azaret

service: fuzzy-giggle 

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    TABLE_NAME: tasks-table

# you can overwrite defaults here
#  stage: dev
  region: us-east-1

functions:
  getTasks:
    role: myRoleForGetTasks
    handler: handler.getTasks
    events:
        - http: GET tasks
  addTask:
      role: myRoleForAddTask
      handler: handler.addTask
      events:
        - http: POST tasks
  updateTask:
      role: myRoleForUpdateTask
      handler: handler.updateTask
      events:
        - http: PUT tasks
  deleteTask:
      role: myRoleForDeleteTask
      handler: handler.deleteTask
      events:
        - http: DELETE tasks            
  emailTasks:
    role: myRoleForEmailTasks
    handler: handler.emailTasks
    events:
          - schedule: rate(24 hours)   
  hello:
    handler: handler.hello


resources:  
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tasks-table
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: arn:aws:dynamodb:*:*:table/tasks-table
        Roles:
          - Ref: IamRoleLambdaExecution
    myRoleForGetTasks:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForGetTasks
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table
    myRoleForAddTask:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForAddTask
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table             
    myRoleForUpdateTask:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForUpdateTask
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table        
    myRoleForDeleteTask:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForDeleteTask
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table                                        
    myRoleForEmailTasks:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForEmailTasks
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table           
          - PolicyName: myPolicyToSendEmailsWithSes
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                  Resource: '*'